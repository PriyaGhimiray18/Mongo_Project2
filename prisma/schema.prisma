generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id 
  username  String
  email     String    @unique
  studentId String?   @unique
  password  String
  isAdmin   Boolean   @default(false)
  createdAt DateTime  @default(now())
  bookings  Booking[]
  accounts  Account[]
  sessions  Session[]
   @@map("User") 
}

model Hostel {
  id            String   @id @default(uuid())
  name          String   @unique
  type          String
  description   String
  accommodation String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  rooms         Room[]
}

model Room {
  status     String    @default("AVAILABLE")
  capacity   Int
  floor      Int
  hostelId   String
  occupants  Int       @default(0)
  roomNumber Int       @map("room_number")
  id         Int       @id @default(autoincrement())
  bookings   Booking[]
  hostel     Hostel    @relation(fields: [hostelId], references: [id])

  @@unique([roomNumber, hostelId], name: "room_number_hostelId")
}

model Booking {
  id           String        @id @default(uuid())
  studentName  String
  department   String
  checkinDate  DateTime
  numPeople    Int
  email        String
  phone        String
  checkoutDate DateTime?
  createdAt    DateTime      @default(now())
  status       BookingStatus @default(PENDING)
  studentId    String
  updatedAt    DateTime      @updatedAt
  userId       String
  roomId       Int
  room         Room          @relation(fields: [roomId], references: [id])
  user         User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([roomId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum RoomStatus {
  AVAILABLE
  PARTIALLY_BOOKED
  FULLY_BOOKED
  MAINTENANCE
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
